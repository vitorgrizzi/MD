import numpy as np
from MD import generate_coordinates, construct_distance_table
import matplotlib.pyplot as plt

def lj_cluster(n_atoms, n_clusters, cluster_size, rho=0.8, min_dist=1.122, atom_mass=1.0, filename='ljcluster',
               filepath='C:/Users/Vitor/Desktop/Simulations/phd/lj',
               restart_from_frame='C:/Users/Vitor/Desktop/Simulations/phd/lj/last_frame.dump'):
    """Create a box with a LJ cluster
    """
    n_neigh = cluster_size - 1
    n_bonds = n_clusters * n_neigh

    box_length = (n_atoms / rho)**(1/3)

    if restart_from_frame:
        coords = []
        with open(restart_from_frame, mode='r') as f:
            for i, line in enumerate(f):
                if i > 8:
                    coords.append(list(map(float, line.split()[-3:])))
        coords = np.array(coords)

    else:
        coords = generate_coordinates(n_atoms, box_length, min_distance=min_dist, max_iter=30, max_tries=25,
                                      decimal_digits=6, scale_coords=False, save_txt=False)

    # Computing the distance matrix
    dist_matrix = construct_distance_table(coords, box_length)
    np.fill_diagonal(dist_matrix, np.inf)
    sorted_dists = np.sort(dist_matrix.ravel())[::2]
    print(sorted_dists[:10])

    # Finding the index of the `n_neigh` closest atoms to each atom
    idxs_neigh = np.argsort(dist_matrix, axis=1)[:, :n_neigh]

    # Storing the `n_neigh` closest atoms to each atom as {atom_id: [neigh1_id, ..., neighM_id, ...}
    id_neighbors = {atom_id: neigh_ids for atom_id, neigh_ids in enumerate(idxs_neigh)}
    avail_ids = np.random.permutation(n_atoms)
    cluster_dict = {}

    # Randomly choosing an atom to be the center of the cluster
    while len(cluster_dict) < n_clusters:
        atom_id, neigh_ids = id_neighbors.popitem()
        candidate_ids = np.hstack((atom_id, neigh_ids))

        if all(np.isin(candidate_ids, avail_ids)):
            cluster_dict[atom_id] = neigh_ids
            # Removing the chosen id and its neighbors from `avail_ids`
            avail_ids = np.setdiff1d(avail_ids, candidate_ids)

    # Creating the data file
    with open(f'{filepath}/{filename}.txt', 'w') as f:
        f.write('Start File for LAMMPS' + 2*'\n')

        f.write(f'{n_atoms} atoms' + '\n')
        f.write(f'{n_bonds} bonds' + 2*'\n')

        f.write(f'1 atom types' + '\n')
        f.write(f'1 bond types' + 2*'\n')

        f.write(f'0.00000000 {box_length} xlo xhi' + '\n')
        f.write(f'0.00000000 {box_length} ylo yhi' + '\n')
        f.write(f'0.00000000 {box_length} zlo zhi' + 2*'\n')

        f.write(f'Masses' + 2*'\n')
        f.write(f'1 {atom_mass:.1f}' + '\n')

        f.write('\n' + 'Atoms'  + 2*'\n')
        for i, coord in enumerate(coords):
            f.write(f'{i+1} 1 1 {coord[0]:.5f} {coord[1]:.5f} {coord[2]:.5f}\n')

        f.write('\n')
        f.write('Bonds' + 2*'\n')
        bond_counter = 1
        for atom_id, neigh_ids in cluster_dict.items():
            for neigh_id in neigh_ids:
                f.write(f'{bond_counter} 1 {atom_id+1} {neigh_id+1}\n')
                bond_counter += 1

def test_distances(n_atoms, traj_file, rho=0.8):
    coords = []
    with open(traj_file, mode='r') as f:
        for i, line in enumerate(f):
            if i > 8 and len(line.split()) >= 5 :
                coords.append(list(map(float, line.split()[-3:])))
    coords = np.array(coords)

    box_length = (n_atoms / rho) ** (1 / 3)
    dist_matrix = construct_distance_table(coords, box_length)
    np.fill_diagonal(dist_matrix, np.inf)
    sorted_dists = np.sort(dist_matrix.ravel())[::2]

    print(sorted_dists[:10])


# For LJ params eps=1, sigma=1, T=1, then I need rho=0.8. Note that rho in LJ is atom/volume.
common_path = 'C:/Users/Vitor/Desktop/Simulations/phd/lj'
quit()
cs = 5
lj_cluster(1372, int(500/(cs-1)), cs, rho=0.8, atom_mass=1.0, filename='ljcluster', restart_from_frame=f'{common_path}/last_frame.dump')
# lj_cluster(10000, int(3500/(cs-1)), cluster_size=cs, rho=0.8, atom_mass=1.0, filename='ljcluster', restart_from_frame=f'{common_path}/L_last_frame.dump')
# test_distances(10000, f'{common_path}/last_frame.dump', rho=0.8)

# [0.90025074 0.91670743 0.92263765 0.92403035 0.92589175 0.92854593
#  0.92912103 0.93383509 0.93417539 0.93731771]

# import matplotlib.pyplot as plt
# E_lj = lambda r: (1/r**12 - 1/r**6)
# E_h = lambda r: 5*(r - 1.122)**2 # k=5
# r = np.linspace(0.9, 1.8, 1000)
# fig, ax = plt.subplots()
# ax.plot(r, E_lj(r), label='LJ Energy', color='forestgreen', lw=2.0, ls='-.', alpha=0.9)
# ax.plot(r, E_h(r), label='Harmonic Energy', color='orangered', lw=2.0, ls='--', alpha=0.9)
# ax.plot(r, E_lj(r) + E_h(r), label='LJ + Harmonic Energy', color='navy', lw=2.0, ls='-')
# ax.axhline(y=0, xmin=0, xmax=r.max(), ls='-', color='black', alpha=0.8)
# ax.set_ylabel(r'$V(r) \, (\mathrm{{LJ \ units}}$)')
# ax.set_xlabel(r'$r \, (\mathrm{{LJ \ units}}$)')
# ax.legend()
# ax.set_ylim([-0.5,2.2])
# fig.savefig(f'C:/Users/Vitor/Desktop/bresa/Python/scripts/zlab/plots_saved/phd/lj/V_ljh.pdf', dpi=500)
# plt.show()

from scipy.optimize import curve_fit
# viscs = np.array([3.14580, 2.93061, 2.382192, 2.426, 2.91747, 3.12324])

# ks = np.array([1, 10, 25, 50, 100, 200])

# func = lambda x, a, b, c: a*x**2 + b*x + c
# func = lambda k, a, k0, g, b: a/((k-k0)**2 + g**2) + b
# popt, _ = curve_fit(func, ks, viscs)
#
# from scipy.interpolate import UnivariateSpline
# spline = UnivariateSpline(ks, viscs, k=3, s=0)
# x = np.arange(1, 200, 1)

# fig, ax = plt.subplots()
# ax.plot(ks, viscs, color='navy', lw=2.0)
# ax.scatter(ks, viscs, color='navy', s=30)
# # ax.plot(x, spline(x), color='navy', lw=2.0)
# ax.set_ylim([2.3, 3.3])
# ax.set_ylabel(r'$\eta$ (LJ units)')
# ax.set_xlabel(r'$k$ (LJ units)')
# # fig.savefig(f'C:/Users/Vitor/Desktop/bresa/Python/scripts/zlab/plots_saved/phd/lj/LJ_visc_vs_k.pdf', dpi=500)
# plt.show()
